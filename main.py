import tkinter as tk
from tkinter import ttk
from threading import Thread
import asyncio
from pymorphy2 import MorphAnalyzer
from recording import AudioRecorder
from transcription import AudioAnalytics
from analyze import Analyzer
from analyze import analyze_lexical_variety
from db import init_db, get_all_count_words, get_latest_tip, get_all_new_words, get_latest_convincingness_score

class RecorderApp(tk.Tk):
    def __init__(self, recorder, analytics, analyzer):
        super().__init__()
        self.title('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—á–∏')
        self.geometry('700x500')
        self.configure(bg='#F8F9FA')
        self.resizable(False,False)

        self.recorder = recorder
        self.analytics = analytics
        self.analyzer = analyzer
        self.morph = MorphAnalyzer()

        self.main_frame = tk.Frame(self, bg='#F8F9FA')
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)


        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ª–µ–≤–æ)
        self.analytics_frame = tk.Frame(self.main_frame, width=335, height=340, bg='#CCE5FF')
        self.analytics_frame.place(x=0, y=0)
        self.analytics_label = tk.Label(self.analytics_frame, text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', font=('Inter', 14, 'bold'), bg='#CCE5FF', justify='center')
        self.analytics_label.place(x=10, y=5, width=305, height=30)

        self.TOP5_label = tk.Label(self.analytics_frame, text='5 —Å–∞–º—ã—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤:', font=('Inter', 12, 'bold'), bg='#CCE5FF', justify='left', anchor='nw')
        self.TOP5_label.place(x=10, y=35)
        self.words_label = tk.Label(self.analytics_frame, text='', font=('Inter', 11), bg='#CCE5FF', justify='left', anchor='nw', wraplength=300)
        self.words_label.place(x=10, y=60, width=320, height=90)

        # # –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        # # # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.convincing_title_label = tk.Label(self.analytics_frame, text='–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏', font=('Inter', 12, 'bold'), bg='#CCE5FF')
        self.convincing_title_label.place(x=10, y=160)
        # # # –û—Ü–µ–Ω–∫–∞
        self.convincing_score_label = tk.Label(self.analytics_frame, text='', font=('Inter', 11), bg='#CCE5FF', justify='left')
        self.convincing_score_label.place(x=10, y=185)
        # # # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        self.convincing_comment_label = tk.Label(self.analytics_frame, text='', font=('Inter', 10), bg='#CCE5FF', wraplength=300, justify='left', anchor='nw')
        self.convincing_comment_label.place(x=10, y=205, width=300, height=50)

        # # –û—Ü–µ–Ω–∫–∞ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        # # # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.variety_label_title = tk.Label(self.analytics_frame, text='–õ–µ–∫—Å–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ', font=('Inter', 12, 'bold'), bg='#CCE5FF')
        self.variety_label_title.place(x=10, y=260)
        # # # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è/–ø–æ—è—Å–Ω–µ–Ω–∏—è
        self.variety_label = tk.Label(self.analytics_frame, text='', font=('Inter', 11), bg='#CCE5FF', justify='left', wraplength=300)
        self.variety_label.place(x=10, y=285)
        # # # –°–ª–æ–≤–æ –û—Ü–µ–Ω–∫–∞:
        self.variety_level_text_label = tk.Label(self.analytics_frame, text='–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –ª–µ–∫—Å–∏–∫–∏:', font=('Inter', 11), bg='#CCE5FF', justify='left', wraplength=300)
        self.variety_level_text_label.place(x=10, y=310)
        # # # –í—ã–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å–∫—Ä–∞—à–µ–Ω–Ω–æ–π
        self.variety_level_label = tk.Label(self.analytics_frame, text='', font=('Inter', 11, 'underline'), bg='#CCE5FF', justify='left', wraplength=300)
        self.variety_level_label.place(x=145, y=310)


        # –°–æ–≤–µ—Ç—ã (–ø—Ä–∞–≤–æ –≤–µ—Ä—Ö)
        self.tips_frame = tk.Frame(self.main_frame, width=335, height=165, bg='#FFF3CD')
        self.tips_frame.place(x=345, y=0)
        self.tips_label = tk.Label(self.tips_frame, text='–°–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ—á–∏', font=('Inter', 16, 'bold'), bg='#FFF3CD', justify='center')
        self.tips_label.place(x=10, y=5, width=305, height=32)
        self.tip_text_label = tk.Label(self.tips_frame, text='', font=('Inter', 11), bg='#FFF3CD', wraplength=310, justify='left', anchor='nw')
        self.tip_text_label.place(x=10, y=37, width=310, height=120)


        # –ó–∞–¥–∞–Ω–∏—è (–ø—Ä–∞–≤–æ –Ω–∏–∑)
        self.tasks_frame = tk.Frame(self.main_frame, width=335, height=165, bg='#D4EDDA')
        self.tasks_frame.place(x=345, y=175)
        self.tasks_label = tk.Label(self.tasks_frame, text='–ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞', font=('Inter', 16, 'bold'), bg='#D4EDDA', justify='center')
        self.tasks_label.place(x=10, y=5, width=305, height=32)
        # # 1-–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.task_word1_label = tk.Label(self.tasks_frame, text='', font=('Inter', 11, 'underline'), bg='#D4EDDA')
        self.task_word1_label.place(x=10, y=40)
        self.task_meaning1_label = tk.Label(self.tasks_frame, text='', font=('Inter', 10), bg='#D4EDDA', wraplength=310, justify='left')
        self.task_meaning1_label.place(x=10, y=60)
        # # 2-–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.task_word2_label = tk.Label(self.tasks_frame, text='', font=('Inter', 11, 'underline'), bg='#D4EDDA')
        self.task_word2_label.place(x=10, y=100)
        self.task_meaning2_label = tk.Label(self.tasks_frame, text='', font=('Inter', 10), bg='#D4EDDA', wraplength=310, justify='left')
        self.task_meaning2_label.place(x=10, y=120)


        # –ë–ª–æ–∫ –∑–∞–ø–∏—Å–∏ (–≤–Ω–∏–∑—É)
        self.record_frame = tk.Frame(self.main_frame, height=130, width=680, bg="#E9ECEF")
        self.record_frame.place(x=0, y=350)

        self.status_label = tk.Label(self.record_frame, text='–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏', font=('Inter', 10), bg='#E9ECEF', fg='gray')
        self.status_label.place(x=290, y=0)
        self.record_button = tk.Canvas(self.record_frame, width=103, height=103, bg="#E9ECEF", highlightthickness=0)
        self.record_circle = self.record_button.create_oval(2, 2, 98, 98, fill='#8CE99A')
        self.record_icon = self.record_button.create_text(49, 45, text='‚ñ∂', font=('Inter', 20), anchor='center')
        self.record_text = self.record_button.create_text(49, 70, text='–ù–∞—á–∞—Ç—å', font=('Inter', 11, 'bold'), fill='black')
        self.record_button.bind('<Button-1>', self.toggle_recording)
        self.record_button.place(x=285, y=20)

        self.progress = ttk.Progressbar(self.record_frame, orient='horizontal', mode='determinate', length=660)
        self.progress_label = tk.Label(self.record_frame, text='', font=('Inter', 10), bg='#A3B18A')
        self.progress.place_forget()
        self.progress_label.place_forget()


        # –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        # # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.full_convincing_comment = ''
        self.is_comment_expanded = False

        # # –î–ª—è —Å–æ–≤–µ—Ç–∞
        self.full_tip_text = ''
        self.short_tip_text = ''
        self.is_tip_expanded = False

        # # –î–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        self.expanded_task_word = None
        self.task_meaning1_label.bind('<Button-1>', lambda e: self.toggle_task_meaning('word1'))
        self.task_meaning2_label.bind('<Button-1>', lambda e: self.toggle_task_meaning('word2'))
        self.task_meaning1_label.config(cursor='hand2')
        self.task_meaning2_label.config(cursor='hand2')

        # # –î–ª—è –∑–∞–ø–∏—Å–∏
        self.pulse_active = False
        self.pulse_state = 0  # –æ—Ç 0 –¥–æ 1 (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.refresh_count_words_display()
        self.refresh_tip_display()
        self.refresh_task_words_display()
        self.refresh_variety_display()
        self.refresh_convincingness_display() 


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
    def toggle_recording(self, event=None):
        if self.recorder.is_recording:
            self.recorder.stop_recording()
            self.record_button.itemconfig(self.record_circle, fill='#7AE28B')
            self.record_button.itemconfig(self.record_icon, text='‚è∏')
            self.record_button.itemconfig(self.record_text, text='', fill='black')
            self.status_label.config(text='–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ...', fg='#FFA500')
            self.start_full_analysis("output.wav") 
            self.pulse_active = False
            self.record_button.coords(self.record_circle, 2, 2, 98, 98)
            
        else:
            self.record_button.itemconfig(self.record_circle, fill='#69DB7C')
            self.record_button.itemconfig(self.record_icon, text='üé§')
            self.record_button.itemconfig(self.record_text, text='–°–ª—É—à–∞—é', fill='black')
            self.status_label.config(text='–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å...', fg='green')
            thread = Thread(target=self.recorder.start_recording)
            thread.daemon = True
            thread.start()
            self.pulse_active = True
            self.animate_record_button()


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    def toggle_comment_display(self, event=None):
        if self.is_comment_expanded:
            # # –°–≤–µ—Ä–Ω—É—Ç–æ–µ
            self.convincing_comment_label.config(text=self.short_comment_text)
            self.convincing_comment_label.place(x=10, y=205, width=300, height=50)
            # # –í—ã–≤–æ–¥ –±–ª–æ–∫–æ–≤
            self.variety_label_title.place(x=10, y=260)
            self.variety_label.place(x=10, y=285)
            self.variety_level_text_label.place(x=10, y=310)
            self.variety_level_label.place(x=145, y=310)
            self.is_comment_expanded = False
        else:
            # # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ
            self.convincing_comment_label.config(text=self.full_convincing_comment + '  ‚Üê —Å–∫—Ä—ã—Ç—å', anchor='nw')
            self.convincing_comment_label.place(x=10, y=205, width=300, height=130)
            # # –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
            self.variety_label_title.place_forget()
            self.variety_label.place_forget()
            self.variety_level_label.place_forget()
            self.variety_level_text_label.place_forget()
            self.is_comment_expanded = True
    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–æ–≤–µ—Ç
    def toggle_tip_display(self, event=None):
        if self.is_tip_expanded:
            self.tip_text_label.config(text=self.short_tip_text, font=('Inter', 11))
            self.is_tip_expanded = False
        else:
            self.tip_text_label.config(text=self.full_tip_text + '  ‚Üê —Å–∫—Ä—ã—Ç—å', font=('Inter', 10))
            self.is_tip_expanded = True


    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    def toggle_task_meaning(self, which):
        if which == self.expanded_task_word:
            # –°–≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
            self.refresh_task_words_display()
            self.expanded_task_word = None
            return
        # –û—á–∏—Å—Ç–∫–∞
        self.task_word1_label.place_forget()
        self.task_meaning1_label.place_forget()
        self.task_word2_label.place_forget()
        self.task_meaning2_label.place_forget()
        if which == 'word1' and self.word1_data:
            word, meaning = self.word1_data
            self.task_word1_label.config(text=word.capitalize() + '  ‚Üê —Å–∫—Ä—ã—Ç—å')
            self.task_meaning1_label.config(text=meaning)
            self.task_word1_label.place(x=10, y=40)
            self.task_meaning1_label.place(x=10, y=60, height=80)
            self.expanded_task_word = 'word1'
        elif which == 'word2' and self.word2_data:
            word, meaning = self.word2_data
            self.task_word2_label.config(text=word.capitalize() + '  ‚Üê —Å–∫—Ä—ã—Ç—å')
            self.task_meaning2_label.config(text=meaning)
            # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é word1
            self.task_word2_label.place(x=10, y=40)
            self.task_meaning2_label.place(x=10, y=60, height=80)
            self.expanded_task_word = 'word2'
    

    # –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ + –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
    def start_full_analysis(self, audio_file_path):
        def run_async_workflow():
            self.update_progress(10, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...')
            asyncio.run(self.analytics.full_analysis_workflow(audio_file_path, self.analyzer))
            self.update_progress(50, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
            self.update_progress(90, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...')
            self.refresh_count_words_display()
            self.refresh_tip_display()
            self.refresh_task_words_display()
            self.refresh_variety_display()
            self.refresh_convincingness_display()
            self.update_progress(100, '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.')
            self.record_button.itemconfig(self.record_circle, fill='#8CE99A')
            self.record_button.itemconfig(self.record_icon, text='‚ñ∂')
            self.record_button.itemconfig(self.record_text, text='–ù–∞—á–∞—Ç—å', fill='black')
        thread = Thread(target=run_async_workflow)
        thread.daemon = True
        thread.start()

    # # –∞–ø–¥–µ–π—Ç –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    def update_progress(self, value, text):
        self.progress.place(x=10, y=120)
        self.progress_label.place(x=10, y=100)
        self.progress['value'] = value
        self.progress_label.config(text=text)
        self.update_idletasks()
        if value >= 100:
            self.after(1000, self.hide_progress)
    # # –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
    def hide_progress(self):
        self.progress.place_forget()
        self.progress_label.place_forget()
        self.status_label.config(text='–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏', fg='gray')


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–û–ü-5 —Å–ª–æ–≤
    def refresh_count_words_display(self):
        words = get_all_count_words()[:5]
        label_text = '\n'.join(f"{i+1}. {word} ‚Äî {count}" for i, (word, count) in enumerate(words))
        self.words_label.config(text=label_text)


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    def refresh_variety_display(self):
        try:
            with open("output.txt", "r", encoding="utf-8") as f:
                text = f.read()
            stats, level = analyze_lexical_variety(text)
            color = {'–ù–∏–∑–∫–æ–µ': '#DC3545', '–°—Ä–µ–¥–Ω–µ–µ': '#FFC107', '–í—ã—Å–æ–∫–æ–µ': "#00CE30"}.get(level, 'black')
            self.variety_label.config(text=f"{stats}")
            self.variety_level_label.config(text=level, fg=color)
        except Exception as e:
            self.variety_label.config(text=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    def refresh_convincingness_display(self):
        score_data = get_latest_convincingness_score()
        if score_data:
            score, explanation = score_data
            self.full_convincing_comment = explanation
            self.is_comment_expanded = False
            self.convincing_score_label.config(text=f"–û—Ü–µ–Ω–∫–∞: {score}/10")
            max_len = 90
            if len(explanation) > max_len:
                short_comment = explanation[:max_len].rsplit(' ', 1)[0].strip() + '... ‚Üí –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ'
            else:
                short_comment = explanation
            self.short_comment_text = short_comment
            self.convincing_comment_label.config(text=self.short_comment_text, fg='#212529')
            self.convincing_comment_label.bind('<Button-1>', self.toggle_comment_display)
            self.convincing_comment_label.config(cursor='hand2')
        else:
            self.convincing_score_label.config(text='')
            self.convincing_comment_label.config(text='')


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
    def refresh_tip_display(self):
        tip = get_latest_tip()
        self.full_tip_text = tip
        self.is_tip_expanded = False
        max_len = 240
        if len(tip) > max_len:
            self.short_tip_text = tip[:max_len].rsplit(' ', 1)[0].strip() + '... ‚Üí –¥–∞–ª–µ–µ'
        else:
            self.short_tip_text = tip
        self.tip_text_label.config(text=self.short_tip_text)
        self.tip_text_label.bind('<Button-1>', self.toggle_tip_display)
        self.tip_text_label.config(cursor='hand2')


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π (–Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è)
    def refresh_task_words_display(self):
        self.expanded_task_word = None
        new_words = get_all_new_words()[:2]
        self.word1_data = new_words[0] if len(new_words) > 0 else None
        self.word2_data = new_words[1] if len(new_words) > 1 else None
        if self.word1_data:
            word, meaning = self.word1_data
            self.task_word1_label.config(text=word.capitalize())
            self.task_meaning1_label.config(text=self._shorten_meaning(meaning))
            self.task_word1_label.place(x=10, y=40)
            self.task_meaning1_label.place(x=10, y=60, height=40)

        if self.word2_data:
            word, meaning = self.word2_data
            self.task_word2_label.config(text=word.capitalize())
            self.task_meaning2_label.config(text=self._shorten_meaning(meaning))
            self.task_word2_label.place(x=10, y=100)
            self.task_meaning2_label.place(x=10, y=120, height=40)

    # # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
    def _shorten_meaning(self, text, max_len=70):
        return text[:max_len].rsplit(' ', 1)[0].strip() + '... ‚Üí —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å' if len(text) > max_len else text
    

    # –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
    def animate_record_button(self):
        if not self.pulse_active:
            return
        offset = 1.5 if self.pulse_state == 0 else 0
        self.record_button.coords(self.record_circle, 2 - offset, 2 - offset, 98 + offset, 98 + offset)
        self.pulse_state = 1 - self.pulse_state
        self.after(500, self.animate_record_button)


    

if __name__ == '__main__':
    api_key = '' # API –¥–ª—è AssemblyAI
    oauth_token = ''
    folder_id = ''

    init_db()
    recorder = AudioRecorder()
    analytics = AudioAnalytics(api_key)
    analyzer = Analyzer(oauth_token, folder_id)
    app = RecorderApp(recorder, analytics, analyzer)
    app.mainloop()
